{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c6b80587",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Background libraries to install if running for first time\n",
    "#!pip install pulp\n",
    "#!conda install -c conda-forge pulp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9b5c32a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing linear programming libraries + pandas\n",
    "import pulp\n",
    "import pandas as pd\n",
    "from pulp import *\n",
    "import random\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d984dff7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the maximization of net profit problem\n",
    "prob = LpProblem(\"Customer_Optimization_Problem\",LpMaximize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "212cd02a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# parameters to be defined before starting the problem\n",
    "n=100\n",
    "\n",
    "p1 = 4.0 # Customer profit per item lower bound\n",
    "p2 = 6.0 # Customer profit per item upper bound\n",
    "p3 = 0.75 # Customer penalty per item lower bound\n",
    "p4 = 1.75 # Customer penalty per item upper bound\n",
    "m1 = 500 # Maximum demand lower bound\n",
    "m2 = 2000 # Maximum demand upper bound\n",
    "m3 = 10 # Minimum demand\n",
    "\n",
    "a = 1.25     #Average square foot space required to sort 1 package\n",
    "b = 2000    #Max available square foot\n",
    "d = b/a      #Maximum number of items to be sorted for packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dc692b37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 0.011000633239746094 seconds ---\n"
     ]
    }
   ],
   "source": [
    "starttime = time.time()\n",
    "\n",
    "cusnum =[]\n",
    "profits=[]\n",
    "penalties=[]\n",
    "maximums=[]\n",
    "minimums=[]\n",
    "\n",
    "for i in range(1,n+1):\n",
    "    cusnum.append(i)\n",
    "    profits.append(round(random.uniform(p1,p2),2))\n",
    "    penalties.append(round(random.uniform(p3,p4),2))\n",
    "    maximums.append(random.randint(m1,m2))\n",
    "    minimums.append(10)\n",
    "\n",
    "df = pd.DataFrame(columns=['Customer Number', 'Profit', 'Penalty','Minimum','Maximum'])\n",
    "\n",
    "df['Customer Number']=cusnum\n",
    "df['Profit']=profits\n",
    "df['Penalty']=penalties\n",
    "df['Maximum']=maximums\n",
    "df['Minimum']=minimums\n",
    "\n",
    "endtime = time.time()\n",
    "print(\"--- %s seconds ---\" % (endtime - starttime))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "efe2e2ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer Number</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Penalty</th>\n",
       "      <th>Minimum</th>\n",
       "      <th>Maximum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>5.47</td>\n",
       "      <td>0.88</td>\n",
       "      <td>10</td>\n",
       "      <td>1392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>4.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>10</td>\n",
       "      <td>1545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>4.43</td>\n",
       "      <td>1.26</td>\n",
       "      <td>10</td>\n",
       "      <td>1927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4.65</td>\n",
       "      <td>0.80</td>\n",
       "      <td>10</td>\n",
       "      <td>1499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>5.29</td>\n",
       "      <td>1.65</td>\n",
       "      <td>10</td>\n",
       "      <td>725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>5.26</td>\n",
       "      <td>1.61</td>\n",
       "      <td>10</td>\n",
       "      <td>1923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.41</td>\n",
       "      <td>10</td>\n",
       "      <td>1587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>5.02</td>\n",
       "      <td>1.26</td>\n",
       "      <td>10</td>\n",
       "      <td>1818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1.16</td>\n",
       "      <td>10</td>\n",
       "      <td>989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>5.06</td>\n",
       "      <td>1.08</td>\n",
       "      <td>10</td>\n",
       "      <td>1321</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Customer Number  Profit  Penalty  Minimum  Maximum\n",
       "0                 1    5.47     0.88       10     1392\n",
       "1                 2    4.51     1.12       10     1545\n",
       "2                 3    4.43     1.26       10     1927\n",
       "3                 4    4.65     0.80       10     1499\n",
       "4                 5    5.29     1.65       10      725\n",
       "..              ...     ...      ...      ...      ...\n",
       "95               96    5.26     1.61       10     1923\n",
       "96               97    4.16     1.41       10     1587\n",
       "97               98    5.02     1.26       10     1818\n",
       "98               99    4.74     1.16       10      989\n",
       "99              100    5.06     1.08       10     1321\n",
       "\n",
       "[100 rows x 5 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5893fc57",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list of the customer numbers\n",
    "customer_numbers = list(df['Customer Number'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "763aaf0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list of profits for all customers\n",
    "Profits = dict(zip(customer_numbers,df['Profit']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "073321e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list of penalties for all customers\n",
    "Penalties = dict(zip(customer_numbers,df['Penalty']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cdc9bddb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list of minimums for all customers\n",
    "Minimums = dict(zip(customer_numbers,df['Minimum']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4c0b6fea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a list of maximums for all customers\n",
    "Maximums = dict(zip(customer_numbers,df['Maximum']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8758299a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assigining Variables to solve\n",
    "Customer_vars = LpVariable.dicts(\"Customer_num\",customer_numbers,lowBound=0,cat='Integer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0e76078e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Building objective function to maximize net profit\n",
    "prob += lpSum([(Profits[i]*Customer_vars[i])-Penalties[i]*(Maximums[i]-Customer_vars[i]) for i in customer_numbers])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "03a8674d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Constraints"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cf882c82",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total square footage has to be less than maximum of b, maximum sqft available\n",
    "prob += lpSum([a*Customer_vars[f] for f in customer_numbers]) <= b, \"sqftmaximum\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "dc3cd980",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Total processed for customers has to be less than d, maximum allowable processing\n",
    "prob += lpSum([Customer_vars[f] for f in customer_numbers]) <= d, \"processmaximum\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bf374198",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Processed for one customer has to be less than the maximum for that customer\n",
    "for f in customer_numbers:\n",
    "    prob += (Customer_vars[f]-Maximums[f]<= 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "baf07081",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Processed for one customer has to be more than the minimum for that customer\n",
    "for f in customer_numbers:\n",
    "    prob += (Customer_vars[f]-Minimums[f]>= 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8d66ad3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Solve the model\n",
    "import pulp\n",
    "solver=pulp.getSolver('COIN_CMD',options=['dualSimplex'])\n",
    "\n",
    "#use cplex solver rather than coin_CMD\n",
    "\n",
    "status = prob.solve()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "582034e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Save the results to a dataframe\n",
    "results = pd.DataFrame(columns=['Customer Number', 'Optimal number to process', 'Square footage utilized'])\n",
    "custnum = []\n",
    "custnumprocess = []\n",
    "custnumsqft = []\n",
    "\n",
    "for v in prob.variables():\n",
    "    custnum.append(v.name)\n",
    "    custnumprocess.append(v.varValue)\n",
    "    custnumsqft.append(v.varValue*a)\n",
    "\n",
    "results[\"Customer Number\"]=custnum\n",
    "results[\"Optimal number to process\"]=custnumprocess\n",
    "results[\"Square footage utilized\"]=custnumsqft"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b4f0c55b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer Number</th>\n",
       "      <th>Optimal number to process</th>\n",
       "      <th>Square footage utilized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Customer_num_1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Customer_num_10</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Customer_num_100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Customer_num_11</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Customer_num_12</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>Customer_num_95</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>Customer_num_96</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>Customer_num_97</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>Customer_num_98</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>Customer_num_99</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Customer Number  Optimal number to process  Square footage utilized\n",
       "0     Customer_num_1                       10.0                     12.5\n",
       "1    Customer_num_10                       10.0                     12.5\n",
       "2   Customer_num_100                       10.0                     12.5\n",
       "3    Customer_num_11                       10.0                     12.5\n",
       "4    Customer_num_12                       10.0                     12.5\n",
       "..               ...                        ...                      ...\n",
       "95   Customer_num_95                       10.0                     12.5\n",
       "96   Customer_num_96                       10.0                     12.5\n",
       "97   Customer_num_97                       10.0                     12.5\n",
       "98   Customer_num_98                       10.0                     12.5\n",
       "99   Customer_num_99                       10.0                     12.5\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "ebffa95a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#cleaning results dataframe to remove prefixes, sorting cust number\n",
    "results[\"Customer Number\"]=results[\"Customer Number\"].str.lstrip('Customer_num_')\n",
    "results[\"Customer Number\"] = results[\"Customer Number\"].astype(int)\n",
    "results.sort_values('Customer Number', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "88ec7bad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer Number</th>\n",
       "      <th>Optimal number to process</th>\n",
       "      <th>Square footage utilized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>96</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>97</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>98</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>99</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Customer Number  Optimal number to process  Square footage utilized\n",
       "0                 1                       10.0                     12.5\n",
       "12                2                       10.0                     12.5\n",
       "23                3                       10.0                     12.5\n",
       "34                4                       10.0                     12.5\n",
       "45                5                       10.0                     12.5\n",
       "..              ...                        ...                      ...\n",
       "96               96                       10.0                     12.5\n",
       "97               97                       10.0                     12.5\n",
       "98               98                       10.0                     12.5\n",
       "99               99                       10.0                     12.5\n",
       "2               100                       10.0                     12.5\n",
       "\n",
       "[100 rows x 3 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "11266d31",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge input data into results dataframe\n",
    "results = pd.merge(results, df, on ='Customer Number', how ='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "a8ff9f74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer Number</th>\n",
       "      <th>Optimal number to process</th>\n",
       "      <th>Square footage utilized</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Penalty</th>\n",
       "      <th>Minimum</th>\n",
       "      <th>Maximum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.47</td>\n",
       "      <td>0.88</td>\n",
       "      <td>10</td>\n",
       "      <td>1392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>10</td>\n",
       "      <td>1545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.43</td>\n",
       "      <td>1.26</td>\n",
       "      <td>10</td>\n",
       "      <td>1927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.65</td>\n",
       "      <td>0.80</td>\n",
       "      <td>10</td>\n",
       "      <td>1499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.29</td>\n",
       "      <td>1.65</td>\n",
       "      <td>10</td>\n",
       "      <td>725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.26</td>\n",
       "      <td>1.61</td>\n",
       "      <td>10</td>\n",
       "      <td>1923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.41</td>\n",
       "      <td>10</td>\n",
       "      <td>1587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.02</td>\n",
       "      <td>1.26</td>\n",
       "      <td>10</td>\n",
       "      <td>1818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1.16</td>\n",
       "      <td>10</td>\n",
       "      <td>989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.06</td>\n",
       "      <td>1.08</td>\n",
       "      <td>10</td>\n",
       "      <td>1321</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Customer Number  Optimal number to process  Square footage utilized  \\\n",
       "0                 1                       10.0                     12.5   \n",
       "1                 2                       10.0                     12.5   \n",
       "2                 3                       10.0                     12.5   \n",
       "3                 4                       10.0                     12.5   \n",
       "4                 5                       10.0                     12.5   \n",
       "..              ...                        ...                      ...   \n",
       "95               96                       10.0                     12.5   \n",
       "96               97                       10.0                     12.5   \n",
       "97               98                       10.0                     12.5   \n",
       "98               99                       10.0                     12.5   \n",
       "99              100                       10.0                     12.5   \n",
       "\n",
       "    Profit  Penalty  Minimum  Maximum  \n",
       "0     5.47     0.88       10     1392  \n",
       "1     4.51     1.12       10     1545  \n",
       "2     4.43     1.26       10     1927  \n",
       "3     4.65     0.80       10     1499  \n",
       "4     5.29     1.65       10      725  \n",
       "..     ...      ...      ...      ...  \n",
       "95    5.26     1.61       10     1923  \n",
       "96    4.16     1.41       10     1587  \n",
       "97    5.02     1.26       10     1818  \n",
       "98    4.74     1.16       10      989  \n",
       "99    5.06     1.08       10     1321  \n",
       "\n",
       "[100 rows x 7 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dc6e2452",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create columns for total profit, total penalty, net profit\n",
    "results[\"Total Profit\"]=results[\"Profit\"]*results[\"Optimal number to process\"]\n",
    "results[\"Total Penalty\"]=results[\"Penalty\"]*(results[\"Maximum\"]-results[\"Optimal number to process\"])\n",
    "results[\"Net Profit\"]=results[\"Total Profit\"]-results[\"Total Penalty\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "141b6146",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Customer Number</th>\n",
       "      <th>Optimal number to process</th>\n",
       "      <th>Square footage utilized</th>\n",
       "      <th>Profit</th>\n",
       "      <th>Penalty</th>\n",
       "      <th>Minimum</th>\n",
       "      <th>Maximum</th>\n",
       "      <th>Total Profit</th>\n",
       "      <th>Total Penalty</th>\n",
       "      <th>Net Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.47</td>\n",
       "      <td>0.88</td>\n",
       "      <td>10</td>\n",
       "      <td>1392</td>\n",
       "      <td>54.7</td>\n",
       "      <td>1216.16</td>\n",
       "      <td>-1161.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.51</td>\n",
       "      <td>1.12</td>\n",
       "      <td>10</td>\n",
       "      <td>1545</td>\n",
       "      <td>45.1</td>\n",
       "      <td>1719.20</td>\n",
       "      <td>-1674.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.43</td>\n",
       "      <td>1.26</td>\n",
       "      <td>10</td>\n",
       "      <td>1927</td>\n",
       "      <td>44.3</td>\n",
       "      <td>2415.42</td>\n",
       "      <td>-2371.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.65</td>\n",
       "      <td>0.80</td>\n",
       "      <td>10</td>\n",
       "      <td>1499</td>\n",
       "      <td>46.5</td>\n",
       "      <td>1191.20</td>\n",
       "      <td>-1144.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.29</td>\n",
       "      <td>1.65</td>\n",
       "      <td>10</td>\n",
       "      <td>725</td>\n",
       "      <td>52.9</td>\n",
       "      <td>1179.75</td>\n",
       "      <td>-1126.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.26</td>\n",
       "      <td>1.61</td>\n",
       "      <td>10</td>\n",
       "      <td>1923</td>\n",
       "      <td>52.6</td>\n",
       "      <td>3079.93</td>\n",
       "      <td>-3027.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.16</td>\n",
       "      <td>1.41</td>\n",
       "      <td>10</td>\n",
       "      <td>1587</td>\n",
       "      <td>41.6</td>\n",
       "      <td>2223.57</td>\n",
       "      <td>-2181.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.02</td>\n",
       "      <td>1.26</td>\n",
       "      <td>10</td>\n",
       "      <td>1818</td>\n",
       "      <td>50.2</td>\n",
       "      <td>2278.08</td>\n",
       "      <td>-2227.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>4.74</td>\n",
       "      <td>1.16</td>\n",
       "      <td>10</td>\n",
       "      <td>989</td>\n",
       "      <td>47.4</td>\n",
       "      <td>1135.64</td>\n",
       "      <td>-1088.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>10.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>5.06</td>\n",
       "      <td>1.08</td>\n",
       "      <td>10</td>\n",
       "      <td>1321</td>\n",
       "      <td>50.6</td>\n",
       "      <td>1415.88</td>\n",
       "      <td>-1365.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows Ã— 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Customer Number  Optimal number to process  Square footage utilized  \\\n",
       "0                 1                       10.0                     12.5   \n",
       "1                 2                       10.0                     12.5   \n",
       "2                 3                       10.0                     12.5   \n",
       "3                 4                       10.0                     12.5   \n",
       "4                 5                       10.0                     12.5   \n",
       "..              ...                        ...                      ...   \n",
       "95               96                       10.0                     12.5   \n",
       "96               97                       10.0                     12.5   \n",
       "97               98                       10.0                     12.5   \n",
       "98               99                       10.0                     12.5   \n",
       "99              100                       10.0                     12.5   \n",
       "\n",
       "    Profit  Penalty  Minimum  Maximum  Total Profit  Total Penalty  Net Profit  \n",
       "0     5.47     0.88       10     1392          54.7        1216.16    -1161.46  \n",
       "1     4.51     1.12       10     1545          45.1        1719.20    -1674.10  \n",
       "2     4.43     1.26       10     1927          44.3        2415.42    -2371.12  \n",
       "3     4.65     0.80       10     1499          46.5        1191.20    -1144.70  \n",
       "4     5.29     1.65       10      725          52.9        1179.75    -1126.85  \n",
       "..     ...      ...      ...      ...           ...            ...         ...  \n",
       "95    5.26     1.61       10     1923          52.6        3079.93    -3027.33  \n",
       "96    4.16     1.41       10     1587          41.6        2223.57    -2181.97  \n",
       "97    5.02     1.26       10     1818          50.2        2278.08    -2227.88  \n",
       "98    4.74     1.16       10      989          47.4        1135.64    -1088.24  \n",
       "99    5.06     1.08       10     1321          50.6        1415.88    -1365.28  \n",
       "\n",
       "[100 rows x 10 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cd42ef4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save results to excel csv\n",
    "results.to_csv('results.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "05ab957e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total net profit is: $-146642.33\n"
     ]
    }
   ],
   "source": [
    "obj = value(prob.objective)\n",
    "print(\"The total net profit is: ${}\".format(round(obj,2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7b7290a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- 0.6530556678771973 seconds ---\n"
     ]
    }
   ],
   "source": [
    "endtime = time.time()\n",
    "print(\"--- %s seconds ---\" % (endtime - starttime))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
